version: 0.2
phases:
  install:
    commands:
      - git config --global credential.helper '!aws --region us-east-1 codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
  pre_build:
    commands:
      - aws s3 sync s3://config.scheduler.page/config/ ./config/
      #     - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 955552760689.dkr.ecr.us-east-1.amazonaws.com
      #      - npm install babel-plugin-transform-runtime --save
      #      - npm install babel-preset-env --save
#      - npm install -g cross-env
#      - npm install jq
  build:
    commands:
      - go version
      - go install golang.org/x/tools/gopls@latest
      - go get github.com/aws/aws-lambda-go/lambda
      - go get github.com/labstack/echo/v4
   #   - cat /tmp/tmpdj5oxyfv/go.mod
  #    - go build scheduler-api
      - sam build --template template.yaml
      - sam package --template-file template.yaml --s3-bucket api-stage.scheduler.page
#      - api-stage.scheduler.page
      - sam deploy
  #    - echo "In the building process"
  #    - echo $DB_INFO
  #    - echo "the username"
  #    - export DB_USERNAME=$(echo "$DB_INFO" | jq -r '.DB_USERNAME')
  #    - echo $DB_USERNAME
  #    - export DB_HOST=$(echo "$DB_INFO" | jq -r '.DB_HOST')
  #    - export DB_PASSWORD=$(echo "$DB_INFO" | jq -r '.DB_PASSWORD')
  #    - export DB_NAME=$(echo "$DB_INFO" | jq -r '.DB_NAME')
      #   TOKEN_SECRET: $TOKEN_SECRET

 #     - export NODE_ENV=$(echo "$DB_INFO" | jq -r '.NODE_ENV')
      - ls

      #  - echo "$DB_INFO" | jq -r '.DB_HOST'
  #    - npm run deploy-stage

